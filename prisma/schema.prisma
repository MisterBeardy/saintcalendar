// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LocationStatus {
  OPEN
  PENDING
  CLOSED
}

enum PendingChangeStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PendingChangeEntityType {
  LOCATION
  SAINT
  STICKER
}

model Location {
  id            String   @id
  state         String
  city          String
  displayName   String
  address       String
  phoneNumber   String
  sheetId       String   @unique
  isActive      Boolean
  managerEmail  String
  openedDate    DateTime?
  status        LocationStatus?
  openingDate   DateTime?
  closingDate   DateTime?
  exclude       String?
  saints        Saint[]
  events        Event[]
  stickers      Sticker[]
}

model Saint {
  id            String     @id @default(cuid())
  saintNumber   String     @unique
  name          String
  saintName     String
  saintDate     String
  saintYear     Int
  locationId    String?
  location      Location?  @relation(fields: [locationId], references: [id])
  totalBeers    Int
  years         SaintYear[]
  milestones    Milestone[]
  events        Event[]
  stickers      Sticker[]
}

model SaintYear {
  id                  String     @id @default(cuid())
  year                Int
  burger              String
  tapBeerList         String[]
  canBottleBeerList   String[]
  facebookEvent       String?
  sticker             String?
  saintId             String
  saint               Saint      @relation(fields: [saintId], references: [id])

  @@unique([saintId, year])
}

model Milestone {
  id                  String   @id @default(cuid())
  count               Int
  date                String
  historicalMilestone String?  // Stores the historical milestone value (string or numeric)
  sticker             String?
  saintId             String
  saint               Saint    @relation(fields: [saintId], references: [id])
}

model Event {
  id                  String     @id @default(cuid())
  date                Int
  title               String
  locationId          String?
  location            Location?  @relation(fields: [locationId], references: [id])
  beers               Int
  saintNumber         String?
  saintedYear         Int?
  month               Int?
  saintName           String
  realName            String
  sticker             String?
  eventType           String
  burgers             Int?
  tapBeers            Int?
  canBottleBeers      Int?
  facebookEvent       String?
  burger              String?
  tapBeerList         String[]
  canBottleBeerList   String[]
  milestoneCount      Int?
  year                Int?
  saintId             String?
  saint               Saint?     @relation(fields: [saintId], references: [id])
}

model Sticker {
  id          String    @id @default(cuid())
  status      String    @default("pending")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  locationId  String?
  location    Location? @relation(fields: [locationId], references: [id])
  saintId     String?
  saint       Saint?    @relation(fields: [saintId], references: [id])
  year        Int?
  imageUrl    String?
  type        String?
  milestone   String?
}

model PendingChange {
  id            String                   @id @default(cuid())
  entityType    PendingChangeEntityType
  entityId      String
  changes       Json
  status        PendingChangeStatus      @default(PENDING)
  requestedBy   String?
  reviewedBy    String?
  reviewedAt    DateTime?
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt

  @@index([entityType, entityId])
  @@index([status, createdAt])
  @@index([requestedBy])
}

model Job {
  id            String    @id
  userId        String
  type          String
  spreadsheetId String?
  status        String    @default("pending")
  progress      Int       @default(0)
  message       String?
  data          Json?
  error         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  workflowId    String?
  phaseId       String?
  workflow      ImportWorkflow? @relation(fields: [workflowId], references: [id])
  phase         ImportPhase?    @relation(fields: [phaseId], references: [id])

  @@index([status, updatedAt])
  @@index([userId, status])
}

model ImportWorkflow {
  id            String    @id @default(cuid())
  userId        String
  spreadsheetId String?
  importType    String    @default("sheets") // sheets, zip
  status        String    @default("pending") // pending, processing, completed, failed, cancelled
  currentPhase  String?   // current phase name
  totalPhases   Int       @default(5) // scan, locations, verify, count, final
  completedPhases Int     @default(0)
  autoApprove   Boolean   @default(false) // enable auto-approval for low-risk phases
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  jobs          Job[]
  phases        ImportPhase[]
  rollbacks     ImportRollback[]
}

model ImportPhase {
  id            String    @id @default(cuid())
  workflowId    String
  workflow      ImportWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  name          String    // scan, locations, verify, count, final
  status        String    @default("pending") // pending, processing, completed, failed, cancelled
  order         Int       // execution order
  progress      Int       @default(0)
  message       String?
  data          Json?     // phase-specific data
  error         String?
  startedAt     DateTime?
  completedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  jobs          Job[]
  rollbacks     ImportRollback[]
}

model ImportRollback {
  id            String    @id @default(cuid())
  workflowId    String
  workflow      ImportWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  phaseId       String
  phase         ImportPhase @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  action        String    // rollback action description
  status        String    @default("pending") // pending, processing, completed, failed
  data          Json?     // rollback data
  error         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
